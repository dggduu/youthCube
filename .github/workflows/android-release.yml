name: Build Android Release & Create GitHub Release

on:
  push:
    tags:
      - 'v*' # e.g., v1.0.0

jobs:
  build-android-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install yarn
        run: npm install -g yarn

      - name: Cache Yarn & Node Modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          yarn install
          yarn add lightningcss-linux-x64-gnu

      - name: Cache Gradle
        uses: actions/cache@v3
        id: cache-gradle
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Extract version from tag and update build.gradle
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "üè∑Ô∏è Tag name: $TAG_NAME"

          VERSION_NAME="${TAG_NAME#v}"
          echo "üîñ Version name: $VERSION_NAME"

          # Use GitHub Run Number as versionCode
          VERSION_CODE=${{ github.run_number }}
          echo "üî¢ Version code: $VERSION_CODE"

          # Write environment variables for subsequent steps
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

          cd android || exit 1

          # Update versionName and versionCode
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" app/build.gradle
          sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" app/build.gradle

          echo "‚úÖ Updated app/build.gradle: versionName=$VERSION_NAME, versionCode=$VERSION_CODE"
          git diff app/build.gradle

      - name: Generate JS Bundle for Android
        run: |
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res/

      - name: Make gradlew executable
        run: |
          cd android && chmod +x gradlew

      - name: Build Android Release (Split + Universal APK)
        run: |
          cd android
          ./gradlew assembleRelease --no-daemon

      - name: Sign and Align APKs
        # Replace the problematic action with a manual script
        run: |
          cd android/app/build/outputs/apk/release/

          # Loop through all unsigned APKs
          for file in ./*-unsigned.apk; do
            if [ -f "$file" ]; then
              echo "üîë Signing $file..."
              
              # Sign the APK
              /usr/bin/jarsigner -verbose \
                -sigalg SHA1withRSA -digestalg SHA1 \
                -keystore /home/runner/keystore.jks \
                -storepass ${{ secrets.KEY_STORE_PASSWORD }} \
                "$file" \
                "${{ secrets.ALIAS }}"

              # Generate the name for the signed APK
              SIGNED_FILE_NAME=$(basename "$file" "-unsigned.apk")-signed.apk
              
              # Align the signed APK
              echo "üìê Zipaligning $SIGNED_FILE_NAME..."
              /usr/local/lib/android/sdk/build-tools/35.0.0/zipalign -v -p 4 \
                "$file" "$SIGNED_FILE_NAME"
              
              # Clean up unsigned file
              rm "$file"
            fi
          done

      - name: Copy Universal APK to release directory
        run: |
          mkdir -p release-apks
          
          # Manually find the signed universal APK
          # Use a more reliable search pattern like 'app-universal-release-signed.apk'
          SIGNED_UNIVERSAL_APK=$(find android/app/build/outputs/apk/release/ -type f -name "*universal*signed.apk")

          if [ -z "$SIGNED_UNIVERSAL_APK" ]; then
            echo "‚ùå No universal APK found! Available files:"
            ls -la android/app/build/outputs/apk/release/
            exit 1
          fi

          cp "$SIGNED_UNIVERSAL_APK" release-apks/
          echo "‚úÖ Copied universal APK: $(basename "$SIGNED_UNIVERSAL_APK")"

      - name: Upload Signed APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: release-apks/
          if-no-files-found: error

      - name: Create GitHub Release and Upload Universal APK
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            üéâ Release ${{ github.ref_name }} is live!

            ‚úÖ Built from tag: ${{ github.ref_name }}
            üì¶ Includes universal APK with support for armeabi-v7a, arm64-v8a, and x86_64.
            üîê Signed with production keystore.
          files: release-apks/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
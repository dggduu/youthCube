name: Build Android Release & Create GitHub Release

on:
  push:
    tags:
      - 'v*' # ‰æãÂ¶Ç v1.0.0

jobs:
  build-android-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install yarn
        run: npm install -g yarn

      - name: Cache Yarn & Node Modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          yarn install
          yarn add lightningcss-linux-x64-gnu

      - name: Cache Gradle
        uses: actions/cache@v3
        id: cache-gradle
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Extract version from tag and update build.gradle
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          VERSION_NAME="${TAG_NAME#v}"
          VERSION_CODE=${{ github.run_number }}
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          cd android || exit 1
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" app/build.gradle
          sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" app/build.gradle

      - name: Generate JS Bundle for Android
        run: |
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res/

      - name: Make gradlew executable
        run: |
          cd android && chmod +x gradlew

      - name: Build Android Release (Split APKs + Universal)
        run: |
          cd android
          ./gradlew assembleRelease --no-daemon

      - name: Sign APKs
        uses: r0adkll/sign-android-release@v1
        id: sign_apks
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "35.0.0"

      - name: Debug - List all signed APKs
        run: |
          echo "üìÑ All signed APKs:"
          echo "${{ steps.sign_apks.outputs.signedReleaseFiles }}" | tr ':' '\n'

      - name: Split signed APKs list
        uses: jungwinter/split@v1
        id: split_apks
        with:
          msg: ${{ steps.sign_apks.outputs.signedReleaseFiles }}
          separator: ':'

      - name: Upload All Signed APKs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apks
          path: |
            ${{ steps.split_apks.outputs._0 }}
            ${{ steps.split_apks.outputs._1 }}
            ${{ steps.split_apks.outputs._2 }}
            ${{ steps.split_apks.outputs._3 }}
            ${{ steps.split_apks.outputs._4 }}
            ${{ steps.split_apks.outputs._5 }}
          if-no-files-found: error

      - name: Create GitHub Release with All APKs
        uses: marvinpinto/action-automatic-releases@latest
        if: startsWith(github.ref, 'refs/tags/')
        with:
          repo_token: ${{ secrets.GH_PAT }}
          automatic_release_tag: ${{ github.ref_name }}
          prerelease: false
          title: "Release ${{ github.ref_name }}"
          body: |
            üéâ Release ${{ github.ref_name }} is live!
            ‚úÖ Built from tag: ${{ github.ref_name }}
            üì¶ Includes:
            - ABI-specific APKs (armeabi-v7a, arm64-v8a, x86_64)
            - Universal APK (supports all architectures)
            üîê Signed with production keystore.
          files: |
            ${{ steps.split_apks.outputs._0 }}
            ${{ steps.split_apks.outputs._1 }}
            ${{ steps.split_apks.outputs._2 }}
            ${{ steps.split_apks.outputs._3 }}
            ${{ steps.split_apks.outputs._4 }}
            ${{ steps.split_apks.outputs._5 }}
          draft: false
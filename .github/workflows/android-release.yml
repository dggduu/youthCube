name: Build Android Release & Create GitHub Release

on:
  workflow_dispatch:

jobs:
  build-android-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install

      - name: Extract version and update build.gradle
        run: |
          # 定义版本标签和名称
          TAG_NAME="v0.1.5"
          VERSION_NAME="${TAG_NAME#v}"
          VERSION_CODE=${{ github.run_number }}
          
          # 将版本信息写入环境变量，便于后续步骤使用
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          
          # 更新 Android 项目的版本
          cd android || exit 1
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" app/build.gradle
          sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" app/build.gradle
          
          echo "Updated build.gradle: versionName=$VERSION_NAME, versionCode=$VERSION_CODE"

      - name: Generate JS Bundle for Android
        run: |
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res/

      - name: Make gradlew executable
        run: |
          cd android && chmod +x gradlew

      - name: Build Android Release (Split APKs + Universal)
        run: |
          cd android
          ./gradlew assembleRelease --no-daemon

      - name: Sign APKs
        uses: ilharp/sign-android-release@v2
        id: sign_app
        with:
          releaseDir: android/app/build/outputs/apk/release
          signingKey: ${{ secrets.SIGNING_KEY }}
          keyAlias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          buildToolsVersion: "36.0.0"

      # 👇 核心修复步骤：构建逗号分隔的文件列表
      - name: Build Comma-Separated Signed Files List
        id: build_files_list  # 添加 id 以便调试（可选）
        run: |
          # 获取签名工具输出的文件路径（以冒号 : 分隔）
          SIGNED_FILES="${{ steps.sign_app.outputs.signedFiles }}"
          echo "Raw signed files output: $SIGNED_FILES"
          
          # 将字符串按冒号分割成数组
          IFS=':' read -ra FILE_ARRAY <<< "$SIGNED_FILES"
          
          # 初始化一个空字符串用于存储结果
          RELEASE_APKS=""
          
          # 遍历数组中的每个文件路径
          for file_path in "${FILE_ARRAY[@]}"; do
            # 去除路径两端的空格
            file_path=$(echo "$file_path" | xargs)
            # 检查路径是否非空且文件存在
            if [ -n "$file_path" ] && [ -f "$file_path" ]; then
              echo "✅ Found and will include: $file_path"
              # 如果是第一个文件，直接赋值；否则用逗号连接
              if [ -z "$RELEASE_APKS" ]; then
                RELEASE_APKS="$file_path"
              else
                RELEASE_APKS="$RELEASE_APKS,$file_path"
              fi
            else
              echo "❌ Warning: File not found or invalid, skipping: $file_path"
            fi
          done
          
          # 将最终的逗号分隔列表写入环境变量
          if [ -n "$RELEASE_APKS" ]; then
            echo "RELEASE_APKS=$RELEASE_APKS" >> $GITHUB_ENV
            echo "📋 Final list of files to upload: $RELEASE_APKS"
          else
            echo "❌ Error: No valid signed APK files found to upload!"
            exit 1
          fi

      # 👇 调试步骤：打印最终的文件列表
      - name: Debug - Final Files to Upload
        if: env.RELEASE_APKS != ''
        run: |
          echo "📤 Files that will be uploaded to the GitHub Release:"
          echo "${{ env.RELEASE_APKS }}" | tr ',' '\n' | sed 's/^/  - /'

      - name: Create Automatic Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GH_PAT }}
          automatic_release_tag: ${{ github.ref_name }}
          prerelease: true
          title: "Release ${{ github.ref_name }}"
          # ✅ 使用环境变量中的逗号分隔列表
          files: ${{ env.RELEASE_APKS }}
